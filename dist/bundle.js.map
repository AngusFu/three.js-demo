{"version":3,"file":"bundle.js","sources":["../index.js"],"sourcesContent":["const THREE = window.THREE;\nconst div = document.getElementById('test');\n\nconst SEPARATION = 100;\nconst AMOUNTX = 30;\nconst AMOUNTY = 60;\n\nlet count = 0;\nlet mouseX = 85;\nlet mouseY = -342;\nlet windowHalfX = window.innerWidth / 2;\nlet windowHalfY = window.innerHeight / 2;\n\nconst flagPosMap = {\n  '14x39': 1\n};\n\nconst {\n  particles,\n  pointsWithFlag\n} = initParticles(); \n\nconst scene = new THREE.Scene();\nconst renderer = new THREE.CanvasRenderer();\nconst camera = new THREE.PerspectiveCamera(120, window.innerWidth / window.innerHeight, 1, 10000);\ncamera.position.z = 1000;\nparticles.forEach(p => scene.add(p));\n\n/**\n * Axis helper\n */\nconst axisHelper = new THREE.AxisHelper(1000000);\naxisHelper.position.set(0, 0, 0);\nscene.add(axisHelper);\n\ninit();\n\nfunction init() {\n  const container = document.createElement('div');\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  container.appendChild(renderer.domElement);\n  document.body.appendChild(container);\n  animate();\n\n  window.addEventListener('resize', function onWindowResize() {\n    windowHalfX = window.innerWidth / 2;\n    windowHalfY = window.innerHeight / 2;\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }, false);\n}\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  render();\n}\n\nfunction render() {\n  camera.position.x += (mouseX - camera.position.x) * .05;\n  camera.position.y += (-mouseY - camera.position.y) * .05;\n  camera.lookAt(scene.position);\n\n  var i = 0;\n  var j = 0;\n  for (var ix = 0; ix < AMOUNTX; ix++) {\n    for (var iy = 0; iy < AMOUNTY; iy++) {\n      let particle = particles[i++];\n      particle.position.y = (Math.sin((ix + count) * 0.3) * 50) + (Math.sin((iy + count) * 0.5) * 50);\n      particle.scale.x = particle.scale.y = (Math.sin((ix + count) * 0.3) + 1) * 2 + (Math.sin((iy + count) * 0.5) + 1) * 2;\n\n      if (`${ix}x${iy}` in flagPosMap) {\n        var point = pointsWithFlag[j++];\n        point.y = particle.position.y;\n        const { x, y } = toScreenCords(point, camera);\n        const scale = Math.min(Math.max(particle.scale.x / 4, .5), 2);\n        div.style.transform = `translate3d(${x}px, ${y}px, 0) scale(${scale})`;\n      }\n    }\n  }\n\n  renderer.render(scene, camera);\n  count += 0.1;\n}\n\n/**\n * 绘制并添加波纹粒子\n */\nfunction initParticles() {\n  let index = 0;\n  const particles = [];\n  const pointsWithFlag = [];\n  const material = new THREE.SpriteCanvasMaterial({\n    color: 0x94fffb,\n    program: function (context) {\n      context.beginPath();\n      context.arc(0, 0, 0.6, 0, Math.PI * 2, true);\n      context.fill();\n    }\n  });\n\n  for (let i = 0; i < AMOUNTX; i++) {\n    for (let j = 0; j < AMOUNTY; j++) {\n      let particle = new THREE.Sprite(material);\n      particle.position.x = i * SEPARATION - ((AMOUNTX * SEPARATION) / 2);\n      particle.position.z = j * SEPARATION - ((AMOUNTY * SEPARATION) / 2);\n\n      particles[index++] = particle;\n      // scene.add(particle);\n\n      if (`${i}x${j}` in flagPosMap) {\n        const { x, z } = particle.position;\n        pointsWithFlag.push({ x, z });\n      }\n    }\n  }\n  return {\n    particles,\n    pointsWithFlag\n  };\n}\n\n/**\n * 将 Three.js 中点的位置投射为屏幕位置\n */\nfunction toScreenCords({\n  x,\n  y,\n  z\n}, camera) {\n  var vector = (new THREE.Vector3(x, y, z)).project(camera);\n  return {\n    x: Math.round(windowHalfX * (1 + vector.x)),\n    y: Math.round(windowHalfY * (1 - vector.y))\n  };\n}\n\n/*function appendImage(src) {\n  var texture = new THREE.TextureLoader(src);\n  var material = new THREE.MeshBasicMaterial({\n    map: texture,\n    side: THREE.DoubleSide\n  });\n  var gemoetry = new THREE.PlaneGeometry(50, 50, 1, 1);\n  var mesh = new THREE.Mesh(gemoetry, material);\n  return mesh;\n}*/\n"],"names":["animate","requestAnimationFrame","render","camera","position","x","mouseX","y","mouseY","lookAt","scene","i","j","ix","AMOUNTX","iy","AMOUNTY","let","particle","particles","Math","sin","count","scale","flagPosMap","point","pointsWithFlag","toScreenCords","min","max","div","style","transform","renderer","ref","z","vector","THREE","Vector3","project","round","windowHalfX","windowHalfY","const","window","document","getElementById","SEPARATION","innerWidth","innerHeight","14x39","index","material","SpriteCanvasMaterial","color","program","context","beginPath","arc","PI","fill","Sprite","push","Scene","CanvasRenderer","PerspectiveCamera","forEach","p","add","axisHelper","AxisHelper","set","container","createElement","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","body","addEventListener","aspect","updateProjectionMatrix"],"mappings":"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"}